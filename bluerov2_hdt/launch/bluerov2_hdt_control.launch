<?xml version="1.0"?>
<launch>
    
    <!-- Launches the controllers according to the hardware interface selected -->
    <!-- Everythings is spawned under a namespace with the same name as the robot's. -->
    
    <arg name="hardware_interface" default="hardware_interface/PositionJointInterface"/>
    <arg name="controllers" default="joint_state_controller arm_pos_controller hand_pos_controller"/>
    <arg name="uuv_name" default="bluerov2" />
    <arg name="model" default="hdt" />
    <arg name="joint_state_frequency" default="100" />
    <arg name="robot_state_frequency" default="100" />
<!--both frequency were 100-->
    
<!-- <arg name="uuv_name" default="bluerov2"/> -->
<arg name="namespace" default="bluerov2"/>

<!-- If you want to generate a ROS bag with the recorded simulated data, set this flag to true -->
<arg name="record" default="false"/>
<arg name="bag_filename" default="recording.bag"/>

<arg name="use_ned_frame" default="false"/>
<arg name="teleop_on" default="true"/>
<arg name="joy_id" default="0"/>
<arg name="gui_on" default="false"/>

<!-- Initial position and heading of the vehicle (wrt Gazebo's inertial frame)  -->
<arg name="x" default="0"/>
<arg name="y" default="0"/>
<arg name="z" default="0"/>
<arg name="yaw" default="0"/>

    <!-- Loads joint controller configurations from YAML file to parameter server -->
    <rosparam ns="$(arg uuv_name)" file="$(find bluerov2_hdt)/config/bluerov2_hdt_control.yaml" command="load"/>
    <!--
    <param name="/$(arg robot_name)/joint_state_controller/publish_rate" value="$(arg joint_state_frequency)" /> 
    -->

  <!-- ** load  and start joint state controllerosrun  
  <node  ns="/iiwa" name="joint_state_controller_loader" pkg="controller_manager" type="controller_manager" respawn="false" output="screen"  args="load joint_state_controller"/>
  <node  ns="/iiwa" name="joint_state_controller_starter" pkg="controller_manager" type="controller_manager" respawn="false" output="screen"  args="start joint_state_controller"/>
-->

  <!-- ** load and  start PositionJointInterface_trajectory_controller 
        * the controller can load/start yet doesnt move when we publish the controller topic
        *  --> 
  <!-- <node ns="/bluerov2" name="PositionJointInterface_trajectory_controller_loader" pkg="controller_manager" type="controller_manager" respawn="false" output="screen"  args="load PositionJointInterface_joint_trajectory_controller"/> -->
  <!-- <node ns="/bluerov2" name="PositionJointInterface_trajectory_controller_starter" pkg="controller_manager" type="controller_manager" respawn="false" output="screen"  args="start PositionJointInterface_joint_trajectory_controller"/> -->

      <!-- Load the arm and hand controllers -->
      <node name="arm_controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" 
      ns="$(arg uuv_name)" 
      args="$(arg controllers)" />
          <!-- joint_state_controller"/> -->

    <!-- Start the PID controller with its default parameters for the ROV vehicle  -->
    <include file="$(find bluerov2_control)/launch/start_pid_controller.launch">
        <arg name="uuv_name" value="$(arg uuv_name)"/>
        <arg name="teleop_on" value="$(arg teleop_on)"/>
        <arg name="joy_id" value="$(arg joy_id)"/>
        <arg name="gui_on" value="$(arg gui_on)"/>
        <arg name="use_ned_frame" value="$(arg use_ned_frame)"/>
    </include>

    <!-- Converts joint states to TF transforms for rviz, etc 
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"   respawn="false" output="screen">
        <remap from="joint_states" to="/$(arg robot_name)/joint_states" />
        <param name="publish_frequency" value="$(arg robot_state_frequency)" />
    </node>
-->
    
</launch>