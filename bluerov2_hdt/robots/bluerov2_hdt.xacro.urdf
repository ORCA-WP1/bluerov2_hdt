<?xml version="1.0" ?>
<!-- =================================================================================== -->
<!-- |    This document was autogenerated by xacro from bluerov2_hdt.xacro             | -->
<!-- |    EDITING THIS FILE BY HAND IS NOT RECOMMENDED                                 | -->
<!-- =================================================================================== -->
<!-- Copyright (c) 2016 The UUV Simulator Authors.
     All rights reserved.
     Licensed under the Apache License, Version 2.0 (the "License");
     you may not use this file except in compliance with the License.
     You may obtain a copy of the License at
       http://www.apache.org/licenses/LICENSE-2.0
     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an "AS IS" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     See the License for the specific language governing permissions and
     limitations under the License.
-->
<robot name="bluerov2" xmlns:xacro="http://wiki.ros.org/xacro">
  <!-- Loading file with sensor macros -->
  <!-- FIXME: what is this offset? -->
  <!-- Some pretty colors -->
  <material name="blue">
    <color rgba="0.0 0.0 0.8 1.0"/>
  </material>
  <material name="green">
    <color rgba="0.0 0.8 0.0 1.0"/>
  </material>
  <material name="grey">
    <color rgba="0.7 0.7 0.7 1.0"/>
  </material>
  <material name="grey2">
    <color rgba="0.9 0.9 0.9 1.0"/>
  </material>
  <material name="red">
    <color rgba="0.8 0.0 0.0 1.0"/>
  </material>
  <material name="orange">
    <color rgba="1.0 0.5 0.0 1.0"/>
  </material>
  <material name="white">
    <color rgba="1.0 1.0 1.0 1.0"/>
  </material>
  <material name="black">
    <color rgba="0.05 0.05 0.05 1.0"/>
  </material>
  <!-- MACRO FOR THRUSTER UNITS  -->
  <!-- ROTOR DYNAMICS MACROS -->
  <!-- First order dynamics -->
  <!--
    MACROS FOR CONVERSION FUNCTIONS BETWEEN ROTOR'S ANG. VELOCITY AND
    THRUSTER FORCE
  -->
  <!-- THRUSTER MODULE MACROS  -->
  <!--
    Thruster model with first order dynamic model for the rotor dynamics
    and a proportional non-linear steady-state conversion from the rotor's
    angular velocity to output thrust force
  -->
  <!-- <gazebo>
    <plugin name="gazebo_ros_control" filename="libgazebo_ros_control.so">
      <robotNamespace>/hdt_arm</robotNamespace>
      <robotSimType>gazebo_ros_control/DefaultRobotHWSim</robotSimType>
      <legacyModeNS>true</legacyModeNS>
    </plugin>
  </gazebo> -->
  <!-- camera -->
  <!-- <gazebo reference="camera_link">
    <sensor name="kinect_camera" type="depth">
      <update_rate>20</update_rate>
      <camera>
        <horizontal_fov>1.047198</horizontal_fov>
        <image>
          <width>640</width>
          <height>480</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <near>0.05</near>
          <far>3</far>
        </clip>
      </camera>
      <plugin name="kinect_controller" filename="libgazebo_ros_openni_kinect.so">
        <baseline>0.2</baseline>
        <alwaysOn>true</alwaysOn>
        <updateRate>1.0</updateRate>
        <cameraName>kinect_ir</cameraName>
        <imageTopicName>/kinect/color/image_raw</imageTopicName>
        <cameraInfoTopicName>/kinect/color/camera_info</cameraInfoTopicName>
        <depthImageTopicName>/kinect/depth/image_raw</depthImageTopicName>
        <depthImageInfoTopicName>/kinect/depth/camera_info</depthImageInfoTopicName>
        <pointCloudTopicName>/kinect/depth/points</pointCloudTopicName>
        <frameName>camera_link_optical</frameName>
        <pointCloudCutoff>0.5</pointCloudCutoff>
        <pointCloudCutoffMax>3.0</pointCloudCutoffMax>
        <distortionK1>0.00000001</distortionK1>
        <distortionK2>0.00000001</distortionK2>
        <distortionK3>0.00000001</distortionK3>
        <distortionT1>0.00000001</distortionT1>
        <distortionT2>0.00000001</distortionT2>
        <CxPrime>0</CxPrime>
        <Cx>0</Cx>
        <Cy>0</Cy>
        <focalLength>0</focalLength>
        <hackBaseline>0</hackBaseline>
      </plugin>
    </sensor>
  </gazebo> -->
  <!-- <xacro:include filename="$(find oberon7_description)/robots/oberon7_default.xacro" /> -->
  <!-- Rigid body description of the base link -->
  <link name="bluerov2/base_link">
    <!--
          Be careful to setup the coefficients for the inertial tensor,
          otherwise your model will become unstable on Gazebo
        -->
    <inertial>
      <mass value="10"/>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <!-- <inertia ixx="525.39" ixy="1.44" ixz="33.41" iyy="794.20" iyz="2.6" izz="691.23"/> -->
      <inertia ixx="0.2712091912" ixy="0.0" ixz="0.0" iyy="0.5589480712" iyz="0.0" izz="0.51507712"/>
    </inertial>
    <!-- This visual geometry representation can be used when running
             tasks in which you need Gazebo to start quickly
        -->
    <!-- <xacro:if value="${use_simplified_mesh}"> -->
    <!-- Code in rexrov2_base.xacro if use the flag use_simplified_mesh -->
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="file:///home/cong/ros_ws/bluerov2_hdt_ws/src/bluerov2/bluerov2_description/meshes/bluerov2_noprop.dae" scale="1 1 1"/>
      </geometry>
    </visual>
    <!-- In rexrov2_base they made collision planes to minize the GPU load -->
    <collision>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="file:///home/cong/ros_ws/bluerov2_hdt_ws/src/bluerov2/bluerov2_description/meshes/bluerov2_noprop.stl" scale="1 1 1"/>
      </geometry>
    </collision>
  </link>
  <gazebo reference="bluerov2/base_link">
    <selfCollide>false</selfCollide>
  </gazebo>
  <!-- Set up hydrodynamic plugin given as input parameter -->
  <gazebo>
    <plugin filename="libuuv_underwater_object_ros_plugin.so" name="uuv_plugin">
      <fluid_density>1028.0</fluid_density>
      <flow_velocity_topic>hydrodynamics/current_velocity</flow_velocity_topic>
      <debug>0</debug>
      <!-- List of hydrodynamic models this robot's links -->
      <link name="bluerov2/base_link">
        <!-- This flag will make the link neutrally buoyant -->
        <neutrally_buoyant>0</neutrally_buoyant>
        <!-- Link's volume -->
        <volume>0.011054</volume>
        <!-- Link's bounding box, it is used to recalculate the immersed
        volume when close to the surface.
        This is a workaround the invalid bounding box given by Gazebo-->
        <box>
          <width>0.448</width>
          <length>0.2384</length>
          <height>0.28066</height>
        </box>
        <!-- Center of buoyancy -->
        <center_of_buoyancy>0 0 0</center_of_buoyancy>
        <!-- Fossen's equation of motion for underwater vehicles
      Reference:
          [1] Fossen, Thor I. Handbook of marine craft hydrodynamics and motion
          control. John Wiley & Sons, 2011.
     -->
        <hydrodynamic_model>
          <type>fossen</type>
          <!-- Added mass: see p.28 in Berg2012 -->
          <added_mass>
            1.7182 0 0 0 0 0
            0 0 0 0 0 0
            0 0 5.468 0 0 0
            0 0 0 0 0 0
            0 0 0 0 1.2481 0
            0 0 0 0 0 0.4006
          </added_mass>
          <!--
            The linear damping coefficients can be provided as a diagonal (6 elements)
            or a full matrix (36 coefficients), like the added-mass coefficients above
            Linear damping: see p.31 in Berg2012
          -->
          <linear_damping>
            -11.7391 -20 -31.8678 -25 -44.9085 -5
          </linear_damping>
          <!--
            The linear damping coefficients proportional to the forward speed
            can be provided as a diagonal (6 elements) or a full matrix (36 coefficients),
            like the added-mass coefficients above.
            This matrix is mostly useful for slender bodies (e.g. AUVs with torpedo shape)
          -->
          <!-- <linear_damping_forward_speed>
            0 0 0 0 0 0
          </linear_damping_forward_speed> -->
          <!--
            The quadratic damping coefficients can be provided as a diagonal (6 elements)
            or a full matrix (36 coefficients), like the added-mass coefficients above
            Non-linear damping: see p.30 in Berg2012
          -->
          <quadratic_damping>
            0 0 0 0 0 0
          </quadratic_damping>
          <!--
            In case you want to model a simple surface vessel, you can use the
            implementation of linear (small angle) theory for boxed shaped vessels
            by providing the following parameters. If you omit the area of the
            water level plane area, it will be calculated from the bounding box
            parameters. Uncomment the lines below in case you are simulating a
            surface vessel.
            For more details on these parameters and the computation of buoyancy
            for vessels using this theory, check:
              [1] Lecture Notes  TTK 4190 Guidance and Control of Vehicles (T. I. Fossen)
                  http://www.fossen.biz/wiley/Ch4.pdf
              [2] Fossen, Thor I. Handbook of marine craft hydrodynamics and motion
                  control. John Wiley & Sons, 2011.
          -->
          <!--
          <metacentric_width>0.0</metacentric_width>
          <metacentric_length>0.0</metacentric_length>
          <water_level_plane_area>0.0</water_level_plane_area>
          -->
        </hydrodynamic_model>
      </link>
      <!-- <link name="${namespace}/base_link">
      <neutrally_buoyant>0</neutrally_buoyant>
      <volume>0.</volume>
      <box>
        <width>0.</width>
        <length>0.</length>
        <height>0.</height>
      </box>
      <hydrodynamic_model>
        <type>cylinder</type>
        <axis>i</axis>
      </hydrodynamic_model>
      </link> -->
      <!-- <link name="${namespace}/endpoint_link">
      <neutrally_buoyant>0</neutrally_buoyant>
      <volume>0.0</volume>
      <box>
        <width>0.0</width>
        <length>0.</length>
        <height>0.</height>
      </box>
      <hydrodynamic_model>
        <type>cylinder</type>
        <axis>i</axis>
      </hydrodynamic_model>
    </link> -->
      <!-- <link name="${namespace}/pedestal_link">
      <neutrally_buoyant>0</neutrally_buoyant>
      <volume>0.000521</volume>
      <box>
        <width>0.101600</width>
        <length>0.173622</length>
        <height>0.044800</height>
      </box>
      <hydrodynamic_model>
        <type>cylinder</type>
        <axis>i</axis>
      </hydrodynamic_model>
    </link>

    <link name="${namespace}/drive1_link">
      <neutrally_buoyant>0</neutrally_buoyant>
      <volume>0.000143</volume>
      <box>
        <width>0.049990</width>
        <length>0.055893</length>
        <height>0.068154</height>
      </box>
      <hydrodynamic_model>
        <type>cylinder</type>
        <axis>i</axis>
      </hydrodynamic_model>
    </link>

    <link name="${namespace}/drive2_link">
      <neutrally_buoyant>0</neutrally_buoyant>
      <volume>0.000143</volume>
      <box>
        <width>0.049990</width>
        <length>0.055893</length>
        <height>0.068154</height>
      </box>
      <hydrodynamic_model>
        <type>cylinder</type>
        <axis>i</axis>
      </hydrodynamic_model>
    </link>

    <link name="${namespace}/humerus_link">
      <neutrally_buoyant>0</neutrally_buoyant>
      <volume>0.000436</volume>
      <box>
        <width>0.042998</width>
        <length>0.307928</length>
        <height>0.042998</height>
      </box>
      <hydrodynamic_model>
        <type>cylinder</type>
        <axis>i</axis>
      </hydrodynamic_model>
    </link> -->
      <!-- <link name="${namespace}/elbow_link">
      <neutrally_buoyant>0</neutrally_buoyant>
      <volume>0.000143</volume>
      <box>
        <width>0.049990</width>
        <length>0.055893</length>
        <height>0.068154</height>
      </box>
      <hydrodynamic_model>
        <type>cylinder</type>
        <axis>i</axis>
      </hydrodynamic_model>
    </link>

    <link name="${namespace}/drive3_link">
      <neutrally_buoyant>0</neutrally_buoyant>
      <volume>0.000143</volume>
      <box>
        <width>0.049990</width>
        <length>0.055893</length>
        <height>0.068154</height>
      </box>
      <hydrodynamic_model>
        <type>cylinder</type>
        <axis>i</axis>
      </hydrodynamic_model>
    </link>

    <link name="${namespace}/drive4_link">
      <neutrally_buoyant>0</neutrally_buoyant>
      <volume>0.000262</volume>
      <box>
        <width>0.042944</width>
        <length>0.042944</length>
        <height>0.206009</height>
      </box>
      <hydrodynamic_model>
        <type>cylinder</type>
        <axis>i</axis>
      </hydrodynamic_model>
    </link>

    <link name="${namespace}/wrist_link">
      <neutrally_buoyant>0</neutrally_buoyant>
      <volume>0.000143</volume>
      <box>
        <width>0.049990</width>
        <length>0.055893</length>
        <height>0.068154</height>
      </box>
      <hydrodynamic_model>
        <type>cylinder</type>
        <axis>i</axis>
      </hydrodynamic_model>
    </link>

    <link name="${namespace}/drive5_link">
      <neutrally_buoyant>0</neutrally_buoyant>
      <volume>0.000143</volume>
      <box>
        <width>0.049990</width>
        <length>0.055893</length>
        <height>0.068154</height>
      </box>
      <hydrodynamic_model>
        <type>cylinder</type>
        <axis>i</axis>
      </hydrodynamic_model>
    </link>

    <link name="${namespace}/drive6_link">
      <neutrally_buoyant>0</neutrally_buoyant>
      <volume>0.000779</volume>
      <box>
        <width>0.148921</width>
        <length>0.152392</length>
        <height>0.103137</height>
      </box>
      <hydrodynamic_model>
        <type>cylinder</type>
        <axis>i</axis>
      </hydrodynamic_model>
    </link>

    <link name="pincer_link">
      <neutrally_buoyant>0</neutrally_buoyant>
      <volume>0.000075</volume>
      <box>
        <width>0.043517</width>
        <length>0.153946</length>
        <height>0.018000</height>
      </box>
      <hydrodynamic_model>
        <type>cylinder</type>
        <axis>i</axis>
      </hydrodynamic_model>
    </link>

    <link name="pincer_link2">
      <neutrally_buoyant>0</neutrally_buoyant>
      <volume>0.000075</volume>
      <box>
        <width>0.043517</width>
        <length>0.153946</length>
        <height>0.018000</height>
      </box>
      <hydrodynamic_model>
        <type>cylinder</type>
        <axis>i</axis>
      </hydrodynamic_model>
    </link> -->
      <!-- <xacro:oberon7_hydro_model namespace="oberon7"/> -->
      <!--
          In case other modules are added to the vehicle (such as a manipulator)
          that also have link running with the underwater object plugin, they
          should also be added in this block. For this, this new module should
          have a file similar to gazebo.xacro above with the description of the
          parameter necessary for the underwater object plugin to be initialized.
        -->
    </plugin>
  </gazebo>
  <!-- Adding the thruster units with the macro created in snippets.xacro -->
  <!--
    Important:
    - The thruster IDs must be given as integers and must be unique to each thruster unit
    - The thruster pose in the <origin> block is relative to the body's center of mass. Be
    aware that Gazebo does not use the SNAME convention per default.
  -->
  <!--
    Dummy link as place holder for the thruster frame,
    since thrusters can often be inside the collision geometry
    of the vehicle and may cause internal collisions if set otherwise
    -->
  <link name="bluerov2/thruster_0">
    <visual>
      <geometry>
        <mesh filename="file:///home/cong/ros_ws/bluerov2_hdt_ws/src/bluerov2/bluerov2_description/meshes/bluerov2_propcw.dae" scale="1 1 1"/>
      </geometry>
    </visual>
    <inertial>
      <mass value="0.010"/>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <inertia ixx="0.000000017" ixy="0.0" ixz="0.0" iyy="0.000000017" iyz="0.0" izz="0.000000017"/>
    </inertial>
  </link>
  <!-- Joint between thruster link and vehicle base link -->
  <joint name="bluerov2/thruster_0_joint" type="continuous">
    <origin rpy="0 0 0.7853981634" xyz="0.1355 -0.1 -0.0725"/>
    <axis xyz="1 0 0"/>
    <parent link="bluerov2/base_link"/>
    <child link="bluerov2/thruster_0"/>
  </joint>
  <!-- From desistek underwater vehicle -->
  <gazebo>
    <!-- Thruster ROS plugin -->
    <plugin filename="libuuv_thruster_ros_plugin.so" name="bluerov2_0_thruster_model">
      <!-- Name of the thruster link -->
      <linkName>bluerov2/thruster_0</linkName>
      <!-- Name of the joint between thruster and vehicle base link -->
      <jointName>bluerov2/thruster_0_joint</jointName>
      <!-- Make the thruster aware of its id -->
      <thrusterID>0</thrusterID>
      <!-- Gain of the input command signal -->
      <gain>1</gain>
      <!-- Maximum allowed input value for the input signal for thruster unit -->
      <!-- <clampMax>0</clampMax> -->
      <!-- Minimum allowed value for the input signal for thruster unit -->
      <!-- <clampMin>0</clampMin> -->
      <!-- Minimum and maximum thrust force output allowed -->
      <!-- <thrustMin>0</thrustMin> -->
      <!-- <thrustMax>200</thrustMax> -->
      <!--
       Value from 0 to 1 to set the efficiency of the output thrust force
       Default value is 1.0
       -->
      <thrust_efficiency>1</thrust_efficiency>
      <!--
       Value from 0 to 1 to set the efficiency of the propeller as a factor
       to be multiplied to the current value of the state variable at each
       iteration.
       Default value is 1.0
       -->
      <propeller_efficiency>1</propeller_efficiency>
      <!-- 2) First order model -->
      <dynamics>
        <type>FirstOrder</type>
        <timeConstant>0.2</timeConstant>
      </dynamics>
      <conversion>
        <type>Basic</type>
        <rotorConstant>0.00001</rotorConstant>
        <!-- <rotorConstant>0</rotorConstant> -->
      </conversion>
    </plugin>
  </gazebo>
  <gazebo reference="bluerov2/thruster_0">
    <selfCollide>false</selfCollide>
  </gazebo>
  <!--
    Dummy link as place holder for the thruster frame,
    since thrusters can often be inside the collision geometry
    of the vehicle and may cause internal collisions if set otherwise
    -->
  <link name="bluerov2/thruster_1">
    <visual>
      <geometry>
        <mesh filename="file:///home/cong/ros_ws/bluerov2_hdt_ws/src/bluerov2/bluerov2_description/meshes/bluerov2_propcw.dae" scale="1 1 1"/>
      </geometry>
    </visual>
    <inertial>
      <mass value="0.010"/>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <inertia ixx="0.000000017" ixy="0.0" ixz="0.0" iyy="0.000000017" iyz="0.0" izz="0.000000017"/>
    </inertial>
  </link>
  <!-- Joint between thruster link and vehicle base link -->
  <joint name="bluerov2/thruster_1_joint" type="continuous">
    <origin rpy="0 0 -0.7853981634" xyz="0.1355 0.1 -0.0725"/>
    <axis xyz="1 0 0"/>
    <parent link="bluerov2/base_link"/>
    <child link="bluerov2/thruster_1"/>
  </joint>
  <!-- From desistek underwater vehicle -->
  <gazebo>
    <!-- Thruster ROS plugin -->
    <plugin filename="libuuv_thruster_ros_plugin.so" name="bluerov2_1_thruster_model">
      <!-- Name of the thruster link -->
      <linkName>bluerov2/thruster_1</linkName>
      <!-- Name of the joint between thruster and vehicle base link -->
      <jointName>bluerov2/thruster_1_joint</jointName>
      <!-- Make the thruster aware of its id -->
      <thrusterID>1</thrusterID>
      <!-- Gain of the input command signal -->
      <gain>1</gain>
      <!-- Maximum allowed input value for the input signal for thruster unit -->
      <!-- <clampMax>0</clampMax> -->
      <!-- Minimum allowed value for the input signal for thruster unit -->
      <!-- <clampMin>0</clampMin> -->
      <!-- Minimum and maximum thrust force output allowed -->
      <!-- <thrustMin>0</thrustMin> -->
      <!-- <thrustMax>200</thrustMax> -->
      <!--
       Value from 0 to 1 to set the efficiency of the output thrust force
       Default value is 1.0
       -->
      <thrust_efficiency>1</thrust_efficiency>
      <!--
       Value from 0 to 1 to set the efficiency of the propeller as a factor
       to be multiplied to the current value of the state variable at each
       iteration.
       Default value is 1.0
       -->
      <propeller_efficiency>1</propeller_efficiency>
      <!-- 2) First order model -->
      <dynamics>
        <type>FirstOrder</type>
        <timeConstant>0.2</timeConstant>
      </dynamics>
      <conversion>
        <type>Basic</type>
        <rotorConstant>0.00001</rotorConstant>
        <!-- <rotorConstant>0</rotorConstant> -->
      </conversion>
    </plugin>
  </gazebo>
  <gazebo reference="bluerov2/thruster_1">
    <selfCollide>false</selfCollide>
  </gazebo>
  <!--
    Dummy link as place holder for the thruster frame,
    since thrusters can often be inside the collision geometry
    of the vehicle and may cause internal collisions if set otherwise
    -->
  <link name="bluerov2/thruster_2">
    <visual>
      <geometry>
        <mesh filename="file:///home/cong/ros_ws/bluerov2_hdt_ws/src/bluerov2/bluerov2_description/meshes/bluerov2_propcw.dae" scale="1 1 1"/>
      </geometry>
    </visual>
    <inertial>
      <mass value="0.010"/>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <inertia ixx="0.000000017" ixy="0.0" ixz="0.0" iyy="0.000000017" iyz="0.0" izz="0.000000017"/>
    </inertial>
  </link>
  <!-- Joint between thruster link and vehicle base link -->
  <joint name="bluerov2/thruster_2_joint" type="continuous">
    <origin rpy="0 0 2.3561944902" xyz="-0.1475 -0.1 -0.0725"/>
    <axis xyz="1 0 0"/>
    <parent link="bluerov2/base_link"/>
    <child link="bluerov2/thruster_2"/>
  </joint>
  <!-- From desistek underwater vehicle -->
  <gazebo>
    <!-- Thruster ROS plugin -->
    <plugin filename="libuuv_thruster_ros_plugin.so" name="bluerov2_2_thruster_model">
      <!-- Name of the thruster link -->
      <linkName>bluerov2/thruster_2</linkName>
      <!-- Name of the joint between thruster and vehicle base link -->
      <jointName>bluerov2/thruster_2_joint</jointName>
      <!-- Make the thruster aware of its id -->
      <thrusterID>2</thrusterID>
      <!-- Gain of the input command signal -->
      <gain>1</gain>
      <!-- Maximum allowed input value for the input signal for thruster unit -->
      <!-- <clampMax>0</clampMax> -->
      <!-- Minimum allowed value for the input signal for thruster unit -->
      <!-- <clampMin>0</clampMin> -->
      <!-- Minimum and maximum thrust force output allowed -->
      <!-- <thrustMin>0</thrustMin> -->
      <!-- <thrustMax>200</thrustMax> -->
      <!--
       Value from 0 to 1 to set the efficiency of the output thrust force
       Default value is 1.0
       -->
      <thrust_efficiency>1</thrust_efficiency>
      <!--
       Value from 0 to 1 to set the efficiency of the propeller as a factor
       to be multiplied to the current value of the state variable at each
       iteration.
       Default value is 1.0
       -->
      <propeller_efficiency>1</propeller_efficiency>
      <!-- 2) First order model -->
      <dynamics>
        <type>FirstOrder</type>
        <timeConstant>0.2</timeConstant>
      </dynamics>
      <conversion>
        <type>Basic</type>
        <rotorConstant>0.00001</rotorConstant>
        <!-- <rotorConstant>0</rotorConstant> -->
      </conversion>
    </plugin>
  </gazebo>
  <gazebo reference="bluerov2/thruster_2">
    <selfCollide>false</selfCollide>
  </gazebo>
  <!--
    Dummy link as place holder for the thruster frame,
    since thrusters can often be inside the collision geometry
    of the vehicle and may cause internal collisions if set otherwise
    -->
  <link name="bluerov2/thruster_3">
    <visual>
      <geometry>
        <mesh filename="file:///home/cong/ros_ws/bluerov2_hdt_ws/src/bluerov2/bluerov2_description/meshes/bluerov2_propcw.dae" scale="1 1 1"/>
      </geometry>
    </visual>
    <inertial>
      <mass value="0.010"/>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <inertia ixx="0.000000017" ixy="0.0" ixz="0.0" iyy="0.000000017" iyz="0.0" izz="0.000000017"/>
    </inertial>
  </link>
  <!-- Joint between thruster link and vehicle base link -->
  <joint name="bluerov2/thruster_3_joint" type="continuous">
    <origin rpy="0 0 -2.3561944902" xyz="-0.1475 0.1 -0.0725"/>
    <axis xyz="1 0 0"/>
    <parent link="bluerov2/base_link"/>
    <child link="bluerov2/thruster_3"/>
  </joint>
  <!-- From desistek underwater vehicle -->
  <gazebo>
    <!-- Thruster ROS plugin -->
    <plugin filename="libuuv_thruster_ros_plugin.so" name="bluerov2_3_thruster_model">
      <!-- Name of the thruster link -->
      <linkName>bluerov2/thruster_3</linkName>
      <!-- Name of the joint between thruster and vehicle base link -->
      <jointName>bluerov2/thruster_3_joint</jointName>
      <!-- Make the thruster aware of its id -->
      <thrusterID>3</thrusterID>
      <!-- Gain of the input command signal -->
      <gain>1</gain>
      <!-- Maximum allowed input value for the input signal for thruster unit -->
      <!-- <clampMax>0</clampMax> -->
      <!-- Minimum allowed value for the input signal for thruster unit -->
      <!-- <clampMin>0</clampMin> -->
      <!-- Minimum and maximum thrust force output allowed -->
      <!-- <thrustMin>0</thrustMin> -->
      <!-- <thrustMax>200</thrustMax> -->
      <!--
       Value from 0 to 1 to set the efficiency of the output thrust force
       Default value is 1.0
       -->
      <thrust_efficiency>1</thrust_efficiency>
      <!--
       Value from 0 to 1 to set the efficiency of the propeller as a factor
       to be multiplied to the current value of the state variable at each
       iteration.
       Default value is 1.0
       -->
      <propeller_efficiency>1</propeller_efficiency>
      <!-- 2) First order model -->
      <dynamics>
        <type>FirstOrder</type>
        <timeConstant>0.2</timeConstant>
      </dynamics>
      <conversion>
        <type>Basic</type>
        <rotorConstant>0.00001</rotorConstant>
        <!-- <rotorConstant>0</rotorConstant> -->
      </conversion>
    </plugin>
  </gazebo>
  <gazebo reference="bluerov2/thruster_3">
    <selfCollide>false</selfCollide>
  </gazebo>
  <!--
    Dummy link as place holder for the thruster frame,
    since thrusters can often be inside the collision geometry
    of the vehicle and may cause internal collisions if set otherwise
    -->
  <link name="bluerov2/thruster_4">
    <visual>
      <geometry>
        <mesh filename="file:///home/cong/ros_ws/bluerov2_hdt_ws/src/bluerov2/bluerov2_description/meshes/bluerov2_propcw.dae" scale="1 1 1"/>
      </geometry>
    </visual>
    <inertial>
      <mass value="0.010"/>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <inertia ixx="0.000000017" ixy="0.0" ixz="0.0" iyy="0.000000017" iyz="0.0" izz="0.000000017"/>
    </inertial>
  </link>
  <!-- Joint between thruster link and vehicle base link -->
  <joint name="bluerov2/thruster_4_joint" type="continuous">
    <origin rpy="0 -1.5707963268 0" xyz="0.0025 -0.1105 -0.005"/>
    <axis xyz="1 0 0"/>
    <parent link="bluerov2/base_link"/>
    <child link="bluerov2/thruster_4"/>
  </joint>
  <!-- From desistek underwater vehicle -->
  <gazebo>
    <!-- Thruster ROS plugin -->
    <plugin filename="libuuv_thruster_ros_plugin.so" name="bluerov2_4_thruster_model">
      <!-- Name of the thruster link -->
      <linkName>bluerov2/thruster_4</linkName>
      <!-- Name of the joint between thruster and vehicle base link -->
      <jointName>bluerov2/thruster_4_joint</jointName>
      <!-- Make the thruster aware of its id -->
      <thrusterID>4</thrusterID>
      <!-- Gain of the input command signal -->
      <gain>1</gain>
      <!-- Maximum allowed input value for the input signal for thruster unit -->
      <!-- <clampMax>0</clampMax> -->
      <!-- Minimum allowed value for the input signal for thruster unit -->
      <!-- <clampMin>0</clampMin> -->
      <!-- Minimum and maximum thrust force output allowed -->
      <!-- <thrustMin>0</thrustMin> -->
      <!-- <thrustMax>200</thrustMax> -->
      <!--
       Value from 0 to 1 to set the efficiency of the output thrust force
       Default value is 1.0
       -->
      <thrust_efficiency>1</thrust_efficiency>
      <!--
       Value from 0 to 1 to set the efficiency of the propeller as a factor
       to be multiplied to the current value of the state variable at each
       iteration.
       Default value is 1.0
       -->
      <propeller_efficiency>1</propeller_efficiency>
      <!-- 2) First order model -->
      <dynamics>
        <type>FirstOrder</type>
        <timeConstant>0.2</timeConstant>
      </dynamics>
      <conversion>
        <type>Basic</type>
        <rotorConstant>0.00001</rotorConstant>
        <!-- <rotorConstant>0</rotorConstant> -->
      </conversion>
    </plugin>
  </gazebo>
  <gazebo reference="bluerov2/thruster_4">
    <selfCollide>false</selfCollide>
  </gazebo>
  <!--
    Dummy link as place holder for the thruster frame,
    since thrusters can often be inside the collision geometry
    of the vehicle and may cause internal collisions if set otherwise
    -->
  <link name="bluerov2/thruster_5">
    <visual>
      <geometry>
        <mesh filename="file:///home/cong/ros_ws/bluerov2_hdt_ws/src/bluerov2/bluerov2_description/meshes/bluerov2_propcw.dae" scale="1 1 1"/>
      </geometry>
    </visual>
    <inertial>
      <mass value="0.010"/>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <inertia ixx="0.000000017" ixy="0.0" ixz="0.0" iyy="0.000000017" iyz="0.0" izz="0.000000017"/>
    </inertial>
  </link>
  <!-- Joint between thruster link and vehicle base link -->
  <joint name="bluerov2/thruster_5_joint" type="continuous">
    <origin rpy="0 -1.5707963268 0" xyz="0.0025 0.1105 -0.005"/>
    <axis xyz="1 0 0"/>
    <parent link="bluerov2/base_link"/>
    <child link="bluerov2/thruster_5"/>
  </joint>
  <!-- From desistek underwater vehicle -->
  <gazebo>
    <!-- Thruster ROS plugin -->
    <plugin filename="libuuv_thruster_ros_plugin.so" name="bluerov2_5_thruster_model">
      <!-- Name of the thruster link -->
      <linkName>bluerov2/thruster_5</linkName>
      <!-- Name of the joint between thruster and vehicle base link -->
      <jointName>bluerov2/thruster_5_joint</jointName>
      <!-- Make the thruster aware of its id -->
      <thrusterID>5</thrusterID>
      <!-- Gain of the input command signal -->
      <gain>1</gain>
      <!-- Maximum allowed input value for the input signal for thruster unit -->
      <!-- <clampMax>0</clampMax> -->
      <!-- Minimum allowed value for the input signal for thruster unit -->
      <!-- <clampMin>0</clampMin> -->
      <!-- Minimum and maximum thrust force output allowed -->
      <!-- <thrustMin>0</thrustMin> -->
      <!-- <thrustMax>200</thrustMax> -->
      <!--
       Value from 0 to 1 to set the efficiency of the output thrust force
       Default value is 1.0
       -->
      <thrust_efficiency>1</thrust_efficiency>
      <!--
       Value from 0 to 1 to set the efficiency of the propeller as a factor
       to be multiplied to the current value of the state variable at each
       iteration.
       Default value is 1.0
       -->
      <propeller_efficiency>1</propeller_efficiency>
      <!-- 2) First order model -->
      <dynamics>
        <type>FirstOrder</type>
        <timeConstant>0.2</timeConstant>
      </dynamics>
      <conversion>
        <type>Basic</type>
        <rotorConstant>0.00001</rotorConstant>
        <!-- <rotorConstant>0</rotorConstant> -->
      </conversion>
    </plugin>
  </gazebo>
  <gazebo reference="bluerov2/thruster_5">
    <selfCollide>false</selfCollide>
  </gazebo>
  <!-- ###### TO BE IMPLEMENTED ###### -->
  <!-- Mount a Beacon actuator -->
  <!-- <xacro:default_beacon namespace="${namespace}" parent_link="${namespace}/base_link">
    <origin xyz="0 0 0" rpy="0 0 0"/>
  </xacro:default_beacon> -->
  <!--
    Some examples of sensors that can be added to the vehicle frame.
    Set the origin of the sensor frames correctly for your application
    Look into the sensor macros in the package uuv_sensor_ros_plugins/urdf for
    more examples or add you own custom sensor units.
  -->
  <!-- Mount a 3D pose sensor -->
  <link name="bluerov2/pose_sensor_link_default">
    <inertial>
      <inertia ixx="0.00001" ixy="0.0" ixz="0.0" iyy="0.00001" iyz="0.0" izz="0.00001"/>
      <mass value="0.001"/>
      <!-- [kg] -->
      <origin rpy="0 0 0" xyz="0 0 0"/>
    </inertial>
  </link>
  <joint name="bluerov2/pose_sensor_default_joint" type="revolute">
    <origin rpy="0 0 0" xyz="0 0 0"/>
    <axis xyz="0 0 1"/>
    <parent link="bluerov2/base_link"/>
    <child link="bluerov2/pose_sensor_link_default"/>
    <limit effort="0" lower="0" upper="0" velocity="0"/>
  </joint>
  <gazebo>
    <plugin filename="libuuv_gazebo_ros_pose_gt_plugin.so" name="pose_3d_plugin">
      <robot_namespace>bluerov2</robot_namespace>
      <link_name>bluerov2/base_link</link_name>
      <sensor_topic>pose_gt</sensor_topic>
      <static_reference_frame>world</static_reference_frame>
      <noise_sigma>0.0</noise_sigma>
      <noise_amplitude>0.0</noise_amplitude>
      <update_rate>20</update_rate>
      <enable_gazebo_messages>false</enable_gazebo_messages>
      <publish_ned_odom>false</publish_ned_odom>
    </plugin>
  </gazebo>
  <!-- IMU link -->
  <link name="bluerov2/imu_link">
    <inertial>
      <inertia ixx="0.00001" ixy="0.0" ixz="0.0" iyy="0.00001" iyz="0.0" izz="0.00001"/>
      <mass value="0.015"/>
      <!-- [kg] -->
      <origin rpy="0 0 0" xyz="0 0 0"/>
    </inertial>
  </link>
  <!-- IMU joint -->
  <joint name="bluerov2/imu_joint" type="revolute">
    <origin rpy="0 0 0" xyz="0 0 0"/>
    <parent link="bluerov2/base_link"/>
    <child link="bluerov2/imu_link"/>
    <limit effort="0" lower="0" upper="0" velocity="0"/>
    <axis xyz="1 0 0"/>
  </joint>
  <gazebo>
    <plugin filename="libuuv_gazebo_ros_imu_plugin.so" name="libuuv_gazebo_imu_plugin">
      <!-- A good description of the IMU parameters can be found in the kalibr documentation:
           https://github.com/ethz-asl/kalibr/wiki/IMU-Noise-Model-and-Intrinsics -->
      <robot_namespace>bluerov2</robot_namespace>
      <!-- (string, required): ros namespace in which the messages are published -->
      <link_name>bluerov2/imu_link</link_name>
      <!-- (string, required): name of the body which holds the IMU sensor -->
      <sensor_topic>imu</sensor_topic>
      <!-- (string): name of the sensor output topic and prefix of service names (defaults to imu) -->
      <gyroscope_noise_density>0.0003394</gyroscope_noise_density>
      <!-- Gyroscope noise density (two-sided spectrum) [rad/s/sqrt(Hz)] -->
      <gyroscope_random_walk>3.8785e-05</gyroscope_random_walk>
      <!-- Gyroscope bias random walk [rad/s/s/sqrt(Hz)] -->
      <gyroscope_bias_correlation_time>1000.0</gyroscope_bias_correlation_time>
      <!-- Gyroscope bias correlation time constant [s] -->
      <gyroscope_turn_on_bias_sigma>0.0087</gyroscope_turn_on_bias_sigma>
      <!-- Gyroscope turn on bias standard deviation [rad/s] -->
      <accelerometer_noise_density>0.004</accelerometer_noise_density>
      <!-- Accelerometer noise density (two-sided spectrum) [m/s^2/sqrt(Hz)] -->
      <accelerometer_random_walk>0.006</accelerometer_random_walk>
      <!-- Accelerometer bias random walk. [m/s^2/s/sqrt(Hz)] -->
      <accelerometer_bias_correlation_time>300.0</accelerometer_bias_correlation_time>
      <!-- Accelerometer bias correlation time constant [s] -->
      <accelerometer_turn_on_bias_sigma>0.196</accelerometer_turn_on_bias_sigma>
      <!-- Accelerometer turn on bias standard deviation [m/s^2] -->
      <orientation_noise>0.01</orientation_noise>
      <update_rate>50</update_rate>
      <!-- Update period of accelerometer and gyroscope [s] -->
      <enable_gazebo_messages>false</enable_gazebo_messages>
      <enable_local_ned_frame>false</enable_local_ned_frame>
      <static_reference_frame>world</static_reference_frame>
    </plugin>
  </gazebo>
  <link name="bluerov2/pressure_link">
    <inertial>
      <inertia ixx="0.00001" ixy="0.0" ixz="0.0" iyy="0.00001" iyz="0.0" izz="0.00001"/>
      <mass value="0.015"/>
      <!-- [kg] -->
      <origin rpy="0 0 0" xyz="0 0 0"/>
    </inertial>
    <visual>
      <geometry>
        <mesh filename="file:///home/cong/ros_ws/bluerov2_hdt_ws/src/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/meshes/pressure.dae" scale="1 1 1"/>
      </geometry>
    </visual>
    <collision>
      <geometry>
        <cylinder length="1e-06" radius="1e-06"/>
      </geometry>
      <origin rpy="0 1.57079632679 0" xyz="0 0 0"/>
    </collision>
  </link>
  <joint name="bluerov2/pressure_joint" type="revolute">
    <origin rpy="0 0 0" xyz="0 0 0"/>
    <parent link="bluerov2/base_link"/>
    <child link="bluerov2/pressure_link"/>
    <limit effort="0" lower="0" upper="0" velocity="0"/>
    <axis xyz="1 0 0"/>
  </joint>
  <gazebo>
    <plugin filename="libuuv_gazebo_ros_subsea_pressure_plugin.so" name="libuuv_gazebo_subseapressure_plugin">
      <robot_namespace>bluerov2</robot_namespace>
      <!-- (string, required): ros namespace in which the messages are published -->
      <link_name>bluerov2/pressure_link</link_name>
      <!-- (string, required): name of the body which holds the IMU sensor -->
      <sensor_topic>pressure</sensor_topic>
      <!-- (string): name of the sensor output topic and prefix of service names (defaults to imu) -->
      <update_rate>10</update_rate>
      <!-- Update period of accelerometer and gyroscope [s] -->
      <saturation>30000</saturation>
      <!-- measurement range [kPa] -->
      <noise_sigma>3.0</noise_sigma>
      <!-- measurement stddev [kPa] -->
      <noise_amplitude>0.0</noise_amplitude>
      <estimate_depth_on>false</estimate_depth_on>
      <!-- infer depth? -->
      <standard_pressure>101.325</standard_pressure>
      <!-- pressure at sea level (depth 0 m) [kPa] -->
      <kPa_per_meter>9.80638</kPa_per_meter>
      <!-- increase in pressure [kPa] per [m] in increased depth -->
      <enable_gazebo_messages>false</enable_gazebo_messages>
    </plugin>
  </gazebo>
  <!-- Beacon Sensor  -->
  <!-- <xacro:default_beacon namespace="${namespace}" parent_link="${namespace}/base_link">
    <origin xyz="0 0 0" rpy="0 0 0"/>
  </xacro:default_beacon> -->
  <!-- Sensor link -->
  <link name="bluerov2/camerafront_link">
    <inertial>
      <inertia ixx="0.00001" ixy="0.0" ixz="0.0" iyy="0.00001" iyz="0.0" izz="0.00001"/>
      <mass value="0.1"/>
      <origin rpy="0 0 0" xyz="0 0 0"/>
    </inertial>
    <visual>
      <geometry>
        <mesh filename="file:///home/cong/ros_ws/bluerov2_hdt_ws/src/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/meshes/oe14-372.dae" scale="1.0 1.0 1.0"/>
      </geometry>
    </visual>
    <collision>
      <geometry>
        <cylinder length="1e-06" radius="1e-06"/>
      </geometry>
      <origin rpy="0 1.57079632679 0" xyz="0 0 0"/>
    </collision>
  </link>
  <joint name="bluerov2/camerafront_joint" type="revolute">
    <origin rpy="0 0 0" xyz="0 0 0.2"/>
    <parent link="bluerov2/base_link"/>
    <child link="bluerov2/camerafront_link"/>
    <limit effort="0" lower="0" upper="0" velocity="0"/>
    <axis xyz="1 0 0"/>
  </joint>
  <link name="bluerov2/camerafront_link_optical">
    <inertial>
      <mass value="0.001"/>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <inertia ixx="1.666666e-12" ixy="0.0" ixz="0.0" iyy="1.666666e-12" iyz="0.0" izz="1.666666e-12"/>
    </inertial>
    <collision>
      <!-- todo: gazebo needs a collision volume or it will ignore the pose of
           the joint that leads to this link (and assume it to be the identity) -->
      <geometry>
        <cylinder length="0.000001" radius="0.000001"/>
      </geometry>
      <origin rpy="0 1.57079632679 0" xyz="0 0 0"/>
    </collision>
  </link>
  <joint name="bluerov2/camerafront_optical_joint" type="revolute">
    <origin rpy="-1.57079632679 0 -1.57079632679" xyz="0 0 0"/>
    <parent link="bluerov2/camerafront_link"/>
    <child link="bluerov2/camerafront_link_optical"/>
    <limit effort="0" lower="0" upper="0" velocity="0"/>
    <axis xyz="1 0 0"/>
  </joint>
  <gazebo reference="bluerov2/camerafront_link">
    <sensor name="camerafront" type="camera">
      <update_rate>30</update_rate>
      <camera name="camerafront">
        <horizontal_fov>1.5125</horizontal_fov>
        <image>
          <width>768</width>
          <height>492</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <near>0.05</near>
          <far>3000</far>
        </clip>
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.02</stddev>
        </noise>
      </camera>
      <plugin filename="libgazebo_ros_camera.so" name="camerafront_controller">
        <updateRate>30</updateRate>
        <cameraName>bluerov2/camerafront</cameraName>
        <frameName>camerafront_link_optical</frameName>
        <attenuationR>0.0</attenuationR>
        <attenuationG>0.0</attenuationG>
        <attenuationB>0.0</attenuationB>
        <backgroundR>0</backgroundR>
        <backgroundG>0</backgroundG>
        <backgroundB>0</backgroundB>
        <!-- required for ros depth cam -->
        <imageTopicName>camera_image</imageTopicName>
        <pointCloudTopicName>camera_cloud</pointCloudTopicName>
        <depthImageTopicName>camera_depth</depthImageTopicName>
        <depthImageCameraInfoTopicName>camera_depth_info</depthImageCameraInfoTopicName>
        <pointCloudCutoff>10.0</pointCloudCutoff>
      </plugin>
    </sensor>
  </gazebo>
  <transmission name="hdt/trans1">
    <type>transmission_interface/SimpleTransmission</type>
    <joint name="hdt/drive1_joint">
      <hardwareInterface>PositionJointInterface</hardwareInterface>
    </joint>
    <actuator name="motor1">
      <hardwareInterface>PositionJointInterface</hardwareInterface>
      <mechanicalReduction>1</mechanicalReduction>
    </actuator>
  </transmission>
  <transmission name="hdt/trans2">
    <type>transmission_interface/SimpleTransmission</type>
    <joint name="hdt/drive2_joint">
      <hardwareInterface>PositionJointInterface</hardwareInterface>
    </joint>
    <actuator name="motor2">
      <hardwareInterface>PositionJointInterface</hardwareInterface>
      <mechanicalReduction>1</mechanicalReduction>
    </actuator>
  </transmission>
  <transmission name="hdt/trans3">
    <type>transmission_interface/SimpleTransmission</type>
    <joint name="hdt/drive3_joint">
      <hardwareInterface>PositionJointInterface</hardwareInterface>
    </joint>
    <actuator name="motor3">
      <hardwareInterface>PositionJointInterface</hardwareInterface>
      <mechanicalReduction>1</mechanicalReduction>
    </actuator>
  </transmission>
  <transmission name="hdt/trans4">
    <type>transmission_interface/SimpleTransmission</type>
    <joint name="hdt/drive4_joint">
      <hardwareInterface>PositionJointInterface</hardwareInterface>
    </joint>
    <actuator name="motor4">
      <hardwareInterface>PositionJointInterface</hardwareInterface>
      <mechanicalReduction>1</mechanicalReduction>
    </actuator>
  </transmission>
  <transmission name="hdt/trans5">
    <type>transmission_interface/SimpleTransmission</type>
    <joint name="hdt/drive5_joint">
      <hardwareInterface>PositionJointInterface</hardwareInterface>
    </joint>
    <actuator name="motor5">
      <hardwareInterface>PositionJointInterface</hardwareInterface>
      <mechanicalReduction>1</mechanicalReduction>
    </actuator>
  </transmission>
  <transmission name="hdt/trans6">
    <type>transmission_interface/SimpleTransmission</type>
    <joint name="hdt/drive6_joint">
      <hardwareInterface>PositionJointInterface</hardwareInterface>
    </joint>
    <actuator name="motor6">
      <hardwareInterface>PositionJointInterface</hardwareInterface>
      <mechanicalReduction>1</mechanicalReduction>
    </actuator>
  </transmission>
  <transmission name="hdt/trans7">
    <type>transmission_interface/SimpleTransmission</type>
    <joint name="hdt/pincer_joint">
      <hardwareInterface>PositionJointInterface</hardwareInterface>
    </joint>
    <actuator name="motor7">
      <hardwareInterface>PositionJointInterface</hardwareInterface>
      <mechanicalReduction>1</mechanicalReduction>
    </actuator>
  </transmission>
  <transmission name="hdt/trans8">
    <type>transmission_interface/SimpleTransmission</type>
    <joint name="hdt/pincer_joint2">
      <hardwareInterface>PositionJointInterface</hardwareInterface>
    </joint>
    <actuator name="motor8">
      <hardwareInterface>PositionJointInterface</hardwareInterface>
      <mechanicalReduction>1</mechanicalReduction>
    </actuator>
  </transmission>
  <gazebo reference="hdt/pedestal_link">
    <selfCollide>false</selfCollide>
    <maxContacts>1</maxContacts>
    <!-- <material>Gazebo/Black</material> -->
    <mu1>0.61</mu1>
    <mu2>0.61</mu2>
  </gazebo>
  <gazebo reference="hdt/drive1_link">
    <selfCollide>false</selfCollide>
    <maxContacts>1</maxContacts>
    <!-- <material>Gazebo/Black</material> -->
    <mu1>0.61</mu1>
    <mu2>0.61</mu2>
  </gazebo>
  <gazebo reference="hdt/drive2_link">
    <selfCollide>false</selfCollide>
    <maxContacts>1</maxContacts>
    <!-- <material>Gazebo/Black</material> -->
    <mu1>0.61</mu1>
    <mu2>0.61</mu2>
  </gazebo>
  <gazebo reference="hdt/humerus_link">
    <selfCollide>false</selfCollide>
    <maxContacts>1</maxContacts>
    <!-- <material>Gazebo/Black</material> -->
    <mu1>0.61</mu1>
    <mu2>0.61</mu2>
  </gazebo>
  <gazebo reference="hdt/elbow_link">
    <selfCollide>false</selfCollide>
    <maxContacts>1</maxContacts>
    <!-- <material>Gazebo/Black</material> -->
    <mu1>0.61</mu1>
    <mu2>0.61</mu2>
  </gazebo>
  <gazebo reference="hdt/drive3_link">
    <selfCollide>false</selfCollide>
    <maxContacts>1</maxContacts>
    <!-- <material>Gazebo/Black</material> -->
    <mu1>0.61</mu1>
    <mu2>0.61</mu2>
  </gazebo>
  <gazebo reference="hdt/drive4_link">
    <selfCollide>false</selfCollide>
    <maxContacts>1</maxContacts>
    <!-- <material>Gazebo/Black</material> -->
    <mu1>0.61</mu1>
    <mu2>0.61</mu2>
  </gazebo>
  <gazebo reference="hdt/wrist_link">
    <selfCollide>false</selfCollide>
    <maxContacts>1</maxContacts>
    <!-- <material>Gazebo/Black</material> -->
    <mu1>0.61</mu1>
    <mu2>0.61</mu2>
  </gazebo>
  <gazebo reference="hdt/drive5_link">
    <selfCollide>false</selfCollide>
    <maxContacts>1</maxContacts>
    <!-- <material>Gazebo/Black</material> -->
    <mu1>0.61</mu1>
    <mu2>0.61</mu2>
  </gazebo>
  <gazebo reference="hdt/drive6_link">
    <selfCollide>false</selfCollide>
    <maxContacts>1</maxContacts>
    <!-- <material>Gazebo/Black</material> -->
    <mu1>0.61</mu1>
    <mu2>0.61</mu2>
  </gazebo>
  <gazebo reference="hdt/pincer_link">
    <selfCollide>false</selfCollide>
    <maxContacts>1</maxContacts>
    <!-- <material>Gazebo/Black</material> -->
    <mu1>0.61</mu1>
    <mu2>0.61</mu2>
  </gazebo>
  <gazebo reference="hdt/pincer_link2">
    <selfCollide>false</selfCollide>
    <maxContacts>1</maxContacts>
    <!-- <material>Gazebo/Black</material> -->
    <mu1>0.61</mu1>
    <mu2>0.61</mu2>
  </gazebo>
  <!-- <gazebo reference="${namespace}/endpoint_link">
    <material>Gazebo/Black</material>
    <mu1>0.61</mu1>
    <mu2>0.61</mu2>
  </gazebo> -->
  <!-- camera -->
  <joint name="hdt/camera_joint" type="fixed">
    <!-- <axis xyz="0 1 0"/> -->
    <parent link="hdt/drive6_link"/>
    <child link="hdt/camera_link"/>
  </joint>
  <link name="hdt/camera_link">
    <collision>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <box size="0.01 0.01 0.01"/>
      </geometry>
    </collision>
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <box size="0.01 0.01 0.01"/>
      </geometry>
      <material name="red"/>
    </visual>
    <inertial>
      <mass value="1e-5"/>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <inertia ixx="1e-6" ixy="0" ixz="0" iyy="1e-6" iyz="0" izz="1e-6"/>
    </inertial>
  </link>
  <!-- generate an optical frame http://www.ros.org/reps/rep-0103.html#suffix-frames
        so that ros and opencv can operate on the camera frame correctly -->
  <joint name="hdt/camera_optical_joint" type="fixed">
    <!-- these values have to be these values otherwise the gazebo camera image
              won't be aligned properly with the frame it is supposedly originating from -->
    <origin rpy="-1.57079632679 0 -1.57079632679" xyz="0 0 0"/>
    <parent link="hdt/camera_link"/>
    <child link="hdt/camera_link_optical"/>
  </joint>
  <link name="hdt/camera_link_optical">
      </link>
  <!-- materials -->
  <material name="black1">
    <color rgba="0.78431372549 0.78431372549 0.78431372549 1.0"/>
  </material>
  <material name="grey1">
    <color rgba="0.250980392157 0.250980392157 0.250980392157 1.0"/>
  </material>
  <material name="yellow1">
    <color rgba="0.941176470588 0.878431372549 0.250980392157 1.0"/>
  </material>
  <!-- segment 0 -->
  <!-- <link name="${namespace}/base_link"/> -->
  <!-- pedestal -->
  <!-- <joint name="${namespace}/pedestal_joint" type="fixed">
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <parent link="${namespace}/base_link"/>
            <child link="${namespace}/pedestal_link"/>
        </joint> -->
  <link name="hdt/pedestal_link">
    <collision>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://hdt_description/meshes/H026994 - A35 M-2 PEDESTAL ASSY - SHAREABLE.STL"/>
      </geometry>
    </collision>
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://hdt_description/meshes/H026994 - A35 M-2 PEDESTAL ASSY - SHAREABLE.STL"/>
      </geometry>
      <material name="black1"/>
    </visual>
    <inertial>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <mass value="0.095"/>
      <inertia ixx="0.05" ixy="0.01" ixz="0.01" iyy="0.05" iyz="0.01" izz="0.05"/>
    </inertial>
  </link>
  <!-- drive 1 -->
  <joint name="hdt/drive1_joint" type="revolute">
    <axis xyz="0 0 1"/>
    <limit effort="60.0" lower="-6.28318530718" upper="6.28318530718" velocity="0.785398163397"/>
    <origin rpy="0 0 -1.57079632679" xyz="0 0 0.08335"/>
    <parent link="hdt/pedestal_link"/>
    <child link="hdt/drive1_link"/>
    <dynamics damping="0.7" friction="0.0"/>
  </joint>
  <link name="hdt/drive1_link">
    <collision>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://hdt_description/meshes/H024840 - A35 M-2 DRIVE MODULE, SHAREABLE.STL"/>
      </geometry>
    </collision>
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://hdt_description/meshes/H024840 - A35 M-2 DRIVE MODULE, SHAREABLE.STL"/>
      </geometry>
      <material name="black1"/>
    </visual>
    <inertial>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <mass value="0.095"/>
      <inertia ixx="0.05" ixy="0.01" ixz="0.01" iyy="0.05" iyz="0.01" izz="0.05"/>
    </inertial>
  </link>
  <!-- drive 2 -->
  <joint name="hdt/drive2_joint" type="revolute">
    <axis xyz="0 0 1"/>
    <limit effort="60.0" lower="-1.57079632679" upper="1.57079632679" velocity="0.785398163397"/>
    <origin rpy="0 -1.57079632679 0" xyz="0.07155 0 0"/>
    <parent link="hdt/drive1_link"/>
    <child link="hdt/drive2_link"/>
    <dynamics damping="0.7" friction="0.0"/>
  </joint>
  <link name="hdt/drive2_link">
    <collision>
      <origin rpy="3.14159265359 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://hdt_description/meshes/H024840 - A35 M-2 DRIVE MODULE, SHAREABLE.STL"/>
      </geometry>
    </collision>
    <visual>
      <origin rpy="3.14159265359 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://hdt_description/meshes/H024840 - A35 M-2 DRIVE MODULE, SHAREABLE.STL"/>
      </geometry>
      <material name="black1"/>
    </visual>
    <inertial>
      <origin rpy="3.14159265359 0 0" xyz="0 0 0"/>
      <mass value="0.095"/>
      <inertia ixx="0.05" ixy="0.01" ixz="0.01" iyy="0.05" iyz="0.01" izz="0.05"/>
    </inertial>
  </link>
  <!-- humerus -->
  <joint name="hdt/humerus_joint" type="fixed">
    <origin rpy="0 0 0" xyz="0.17855 0 0"/>
    <parent link="hdt/drive2_link"/>
    <child link="hdt/humerus_link"/>
  </joint>
  <link name="hdt/humerus_link">
    <collision>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://hdt_description/meshes/H024847 - A35 M-2 PROXIMAL TUBE ASSY - SHAREABLE.STL"/>
      </geometry>
    </collision>
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://hdt_description/meshes/H024847 - A35 M-2 PROXIMAL TUBE ASSY - SHAREABLE.STL"/>
      </geometry>
      <material name="black1"/>
    </visual>
    <inertial>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <mass value="0.095"/>
      <inertia ixx="0.05" ixy="0.01" ixz="0.01" iyy="0.05" iyz="0.01" izz="0.05"/>
    </inertial>
  </link>
  <!-- elbow -->
  <joint name="hdt/elbow_joint" type="fixed">
    <origin rpy="0 0 0" xyz="0.17855 0 0"/>
    <parent link="hdt/humerus_link"/>
    <child link="hdt/elbow_link"/>
  </joint>
  <link name="hdt/elbow_link">
    <collision>
      <origin rpy="0 3.14159265359 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://hdt_description/meshes/H024840 - A35 M-2 DRIVE MODULE, SHAREABLE.STL"/>
      </geometry>
    </collision>
    <visual>
      <origin rpy="0 3.14159265359 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://hdt_description/meshes/H024840 - A35 M-2 DRIVE MODULE, SHAREABLE.STL"/>
      </geometry>
      <material name="black1"/>
    </visual>
    <inertial>
      <origin rpy="0 3.14159265359 0" xyz="0 0 0"/>
      <mass value="0.095"/>
      <inertia ixx="0.05" ixy="0.01" ixz="0.01" iyy="0.05" iyz="0.01" izz="0.05"/>
    </inertial>
  </link>
  <!-- drive 3 -->
  <joint name="hdt/drive3_joint" type="revolute">
    <axis xyz="0 0 1"/>
    <!-- position limits to match parameter settings on actuator -->
    <limit effort="60.0" lower="-4.49" upper="1.35" velocity="0.785398163397"/>
    <origin rpy="0 0 0" xyz="0 0 0.07155"/>
    <parent link="hdt/elbow_link"/>
    <child link="hdt/drive3_link"/>
    <dynamics damping="0.7" friction="0.0"/>
  </joint>
  <link name="hdt/drive3_link">
    <collision>
      <origin rpy="0 1.57079632679 -1.57079632679" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://hdt_description/meshes/H024840 - A35 M-2 DRIVE MODULE, SHAREABLE.STL"/>
      </geometry>
    </collision>
    <visual>
      <origin rpy="0 1.57079632679 -1.57079632679" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://hdt_description/meshes/H024840 - A35 M-2 DRIVE MODULE, SHAREABLE.STL"/>
      </geometry>
      <material name="black1"/>
    </visual>
    <inertial>
      <origin rpy="0 1.57079632679 -1.57079632679" xyz="0 0 0"/>
      <mass value="0.095"/>
      <inertia ixx="0.05" ixy="0.01" ixz="0.01" iyy="0.05" iyz="0.01" izz="0.05"/>
    </inertial>
  </link>
  <!-- drive 4 -->
  <joint name="hdt/drive4_joint" type="revolute">
    <axis xyz="0 0 1"/>
    <limit effort="60.0" lower="-6.28318530718" upper="6.28318530718" velocity="0.785398163397"/>
    <origin rpy="-1.57079632679 0 0" xyz="0 0.142 0"/>
    <parent link="hdt/drive3_link"/>
    <child link="hdt/drive4_link"/>
    <dynamics damping="0.7" friction="0.0"/>
  </joint>
  <link name="hdt/drive4_link">
    <collision>
      <origin rpy="3.14159265359 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://hdt_description/meshes/H024848 - A35 M-2 DISTAL TUBE ASSY - SHAREABLE.STL"/>
      </geometry>
    </collision>
    <visual>
      <origin rpy="3.14159265359 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://hdt_description/meshes/H024848 - A35 M-2 DISTAL TUBE ASSY - SHAREABLE.STL"/>
      </geometry>
      <material name="black1"/>
    </visual>
    <inertial>
      <origin rpy="3.14159265359 0 0" xyz="0 0 0"/>
      <mass value="0.095"/>
      <inertia ixx="0.05" ixy="0.01" ixz="0.01" iyy="0.05" iyz="0.01" izz="0.05"/>
    </inertial>
  </link>
  <!-- wrist -->
  <joint name="hdt/wrist_joint" type="fixed">
    <origin rpy="1.57079632679 -1.57079632679 3.14159265359" xyz="0 0 0.12955"/>
    <parent link="hdt/drive4_link"/>
    <child link="hdt/wrist_link"/>
  </joint>
  <link name="hdt/wrist_link">
    <collision>
      <origin rpy="0 0 3.14159265359" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://hdt_description/meshes/H024840 - A35 M-2 DRIVE MODULE, SHAREABLE.STL"/>
      </geometry>
    </collision>
    <visual>
      <origin rpy="0 0 3.14159265359" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://hdt_description/meshes/H024840 - A35 M-2 DRIVE MODULE, SHAREABLE.STL"/>
      </geometry>
      <material name="black1"/>
    </visual>
    <inertial>
      <origin rpy="0 0 3.14159265359" xyz="0 0 0"/>
      <mass value="0.095"/>
      <inertia ixx="0.05" ixy="0.01" ixz="0.01" iyy="0.05" iyz="0.01" izz="0.05"/>
    </inertial>
  </link>
  <!-- drive 5 -->
  <joint name="hdt/drive5_joint" type="revolute">
    <axis xyz="0 0 1"/>
    <limit effort="60.0" lower="-6.28318530718" upper="6.28318530718" velocity="0.785398163397"/>
    <origin rpy="3.14159265359 0 0" xyz="0 0 -0.07155"/>
    <parent link="hdt/wrist_link"/>
    <child link="hdt/drive5_link"/>
    <dynamics damping="0.7" friction="0.0"/>
  </joint>
  <link name="hdt/drive5_link">
    <collision>
      <origin rpy="0 1.57079632679 3.14159265359" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://hdt_description/meshes/H024840 - A35 M-2 DRIVE MODULE, SHAREABLE.STL"/>
      </geometry>
    </collision>
    <visual>
      <origin rpy="0 1.57079632679 3.14159265359" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://hdt_description/meshes/H024840 - A35 M-2 DRIVE MODULE, SHAREABLE.STL"/>
      </geometry>
      <material name="black1"/>
    </visual>
    <inertial>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <mass value="0.095"/>
      <inertia ixx="0.05" ixy="0.01" ixz="0.01" iyy="0.05" iyz="0.01" izz="0.05"/>
    </inertial>
  </link>
  <!-- drive 6 -->
  <joint name="hdt/drive6_joint" type="revolute">
    <axis xyz="0 0 1"/>
    <limit effort="60.0" lower="-6.28318530718" upper="6.28318530718" velocity="0.785398163397"/>
    <origin rpy="0 1.57079632679 0" xyz="0.0885 0 0"/>
    <parent link="hdt/drive5_link"/>
    <child link="hdt/drive6_link"/>
    <dynamics damping="0.7" friction="0.0"/>
  </joint>
  <link name="hdt/drive6_link">
    <collision>
      <origin rpy="0 1.57079632679 -1.57079632679" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://hdt_description/meshes/H024842 - A35 M-2 PINCER ASSY - SHAREABLE, UNDERWATER.STL"/>
      </geometry>
    </collision>
    <visual>
      <origin rpy="0 1.57079632679 -1.57079632679" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://hdt_description/meshes/H024842 - A35 M-2 PINCER ASSY - SHAREABLE, UNDERWATER.STL"/>
      </geometry>
      <material name="black1"/>
    </visual>
    <inertial>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <mass value="0.095"/>
      <inertia ixx="0.05" ixy="0.01" ixz="0.01" iyy="0.05" iyz="0.01" izz="0.05"/>
    </inertial>
  </link>
  <!-- Pincers -->
  <joint name="hdt/pincer_joint" type="revolute">
    <!-- <hdt id="10" kmin="75" kmax="150" inertia="0.075"/>		 -->
    <axis xyz="0 0 1"/>
    <limit effort="60.0" lower="-0.2" upper="0.9" velocity="0.5"/>
    <origin rpy="-1.57079632679 -1.57079632679 0" xyz="0.0135 0 0.0375"/>
    <parent link="hdt/drive6_link"/>
    <child link="hdt/pincer_link"/>
    <dynamics damping="0.7" friction="0.0"/>
  </joint>
  <link name="hdt/pincer_link">
    <collision>
      <origin rpy="3.14159265359 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://hdt_description/meshes/H022927 - A35 PINCER FINGER, LONG, OVERMOLD ASSY - SHAREABLE.STL"/>
      </geometry>
    </collision>
    <visual>
      <origin rpy="3.14159265359 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://hdt_description/meshes/H022927 - A35 PINCER FINGER, LONG, OVERMOLD ASSY - SHAREABLE.STL"/>
      </geometry>
      <material name="black1"/>
    </visual>
    <inertial>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <mass value="0.095"/>
      <inertia ixx="0.05" ixy="0.01" ixz="0.01" iyy="0.05" iyz="0.01" izz="0.05"/>
    </inertial>
  </link>
  <!-- EE 2 -->
  <!-- THIS IS THE SECOND PINCER, NEEDS TO MOVE EQUAL BUT OPPOSITE AS PINCER 1 -->
  <joint name="hdt/pincer_joint2" type="revolute">
    <!--<hdt id="10b" kmin="75" kmax="150" inertia="0.075"/>-->
    <axis xyz="0 0 1"/>
    <origin rpy="-1.57079632679 -1.57079632679 3.14159265359" xyz="-0.0135 0 0.0375"/>
    <parent link="hdt/drive6_link"/>
    <child link="hdt/pincer_link2"/>
    <calibration rising="0.0"/>
    <dynamics damping="0.7" friction="0.0"/>
    <limit effort="60.0" lower="-0.2" upper="1" velocity="0.5"/>
    <mimic joint="hdt/pincer_joint" multiplier="1" offset="0.0"/>
  </joint>
  <link name="hdt/pincer_link2">
    <collision>
      <origin rpy="3.14159265359 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://hdt_description/meshes/H022927 - A35 PINCER FINGER, LONG, OVERMOLD ASSY - SHAREABLE.STL"/>
      </geometry>
    </collision>
    <visual>
      <origin rpy="3.14159265359 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://hdt_description/meshes/H022927 - A35 PINCER FINGER, LONG, OVERMOLD ASSY - SHAREABLE.STL"/>
      </geometry>
      <material name="black1"/>
    </visual>
    <inertial>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <mass value="0.095"/>
      <inertia ixx="0.05" ixy="0.01" ixz="0.01" iyy="0.05" iyz="0.01" izz="0.05"/>
    </inertial>
  </link>
  <!-- endpoint -->
  <joint name="hdt/endpoint_joint" type="fixed">
    <origin rpy="1.57079632679 -1.57079632679 0" xyz="0 0 0.1"/>
    <parent link="hdt/drive6_link"/>
    <child link="hdt/endpoint_link"/>
  </joint>
  <link name="hdt/endpoint_link">
        </link>
  <joint name="hdt/anchor" type="fixed">
    <parent link="bluerov2/base_link"/>
    <child link="hdt/pedestal_link"/>
    <origin rpy="3.14 0 0" xyz="0. 0. -0.175"/>
    <!-- <axis xyz="0 1 0"/> -->
    <!-- <limit effort="0" lower="0" upper="0" velocity="0"/> -->
  </joint>
  <gazebo>
    <plugin filename="libgazebo_ros_control.so" name="gazebo_ros_control">
      <robotNamespace>/bluerov2</robotNamespace>
      <robotParam>/bluerov2/robot_description</robotParam>
      <legacyModeNS>true</legacyModeNS>
    </plugin>
  </gazebo>
  <gazebo>
    <plugin filename="libuuv_joint_state_publisher.so" name="uuv_joint_state_publisher">
      <robotNamespace>bluerov2</robotNamespace>
      <updateRate>50</updateRate>
    </plugin>
  </gazebo>
  <!-- camera attached to rexrov2/base_link-->
  <gazebo reference="bluerov2/base_link">
    <sensor name="camera_out" type="camera">
      <update_rate>30.0</update_rate>
      <camera name="head">
        <pose>4 -4 2 0.0 0.275643 2.356190</pose>
        <view_controller>orbit</view_controller>
        <!--   <horizontal_fov>1.3962634</horizontal_fov>  -->
        <image>
          <width>800</width>
          <height>800</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <near>0.02</near>
          <far>300</far>
        </clip>
      </camera>
      <plugin filename="libgazebo_ros_camera.so" name="camera_controller">
        <alwaysOn>true</alwaysOn>
        <updateRate>0.0</updateRate>
        <cameraName>bluerov2/camera_out</cameraName>
        <imageTopicName>/bluerov2/camera_out/image_raw</imageTopicName>
        <cameraInfoTopicName>camera_info</cameraInfoTopicName>
        <frameName>bluerov2/base_link</frameName>
        <hackBaseline>0.07</hackBaseline>
        <distortionK1>0.0</distortionK1>
        <distortionK2>0.0</distortionK2>
        <distortionK3>0.0</distortionK3>
        <distortionT1>0.0</distortionT1>
        <distortionT2>0.0</distortionT2>
      </plugin>
    </sensor>
  </gazebo>
  <!-- Joints -->
  <joint name="bluerov2/kinect_camera_kinect_joint" type="fixed">
    <origin rpy="0 0 0" xyz="0.25 0 -0.1"/>
    <parent link="bluerov2/base_link"/>
    <child link="bluerov2/kinect_camera_kinect_link"/>
  </joint>
  <!-- kinect ir sensor physical attachment -->
  <joint name="bluerov2/kinect_camera_kinect_ir_joint" type="fixed">
    <origin rpy="0.0 0.0 0.0" xyz="0.025 0.01 0.052"/>
    <parent link="bluerov2/kinect_camera_kinect_link"/>
    <child link="bluerov2/kinect_camera_kinect_ir_link"/>
  </joint>
  <!-- kinect ir sensor frame -->
  <joint name="bluerov2/kinect_camera_kinect_ir_optical_frame_joint" type="fixed">
    <origin rpy="-1.57079632679 0.0 -1.57079632679" xyz="0 0 0"/>
    <parent link="bluerov2/kinect_camera_kinect_ir_link"/>
    <child link="bluerov2/kinect_camera_kinect_ir_optical_frame"/>
  </joint>
  <!-- kinect rgb sensor physical attachment -->
  <joint name="bluerov2/kinect_camera_kinect_rgb_joint" type="fixed">
    <origin rpy="0.0 0.0 0.0" xyz="0.025 -0.015 0.052"/>
    <parent link="bluerov2/kinect_camera_kinect_link"/>
    <child link="bluerov2/kinect_camera_kinect_rgb_link"/>
  </joint>
  <!-- kinect rgb sensor frame -->
  <joint name="bluerov2/kinect_camera_kinect_rgb_optical_frame_joint" type="fixed">
    <origin rpy="-1.57079632679 0.0 -1.57079632679" xyz="0 0 0"/>
    <parent link="bluerov2/kinect_camera_kinect_rgb_link"/>
    <child link="bluerov2/kinect_camera_kinect_rgb_optical_frame"/>
  </joint>
  <!-- Links -->
  <link name="bluerov2/kinect_camera_kinect_link">
    <inertial>
      <mass value="0.001"/>
      <origin rpy="0.0 0.0 0.0" xyz="0.0 0.0 0.0"/>
      <inertia ixx="0.01" ixy="0.0" ixz="0.0" iyy="0.01" iyz="0.0" izz="0.01"/>
    </inertial>
    <visual>
      <origin rpy="0.0 0.0 0" xyz="0.0 0.0 0.0"/>
      <geometry>
        <mesh filename="package://bluerov2_hdt/meshes/kinect.dae" scale="1 1 1"/>
      </geometry>
      <material name="gray">
        <color rgba="0.5 0.5 0.5 1"/>
      </material>
    </visual>
    <collision>
      <origin rpy="0.0 0.0 0.0" xyz="0.0 0.0 0.0"/>
      <geometry>
        <mesh filename="package://bluerov2_hdt/meshes/kinect.dae" scale="1 1 1"/>
      </geometry>
    </collision>
  </link>
  <link name="bluerov2/kinect_camera_kinect_ir_link">
    <inertial>
      <mass value="0.001"/>
      <origin rpy="0.0 0.0 0.0" xyz="0.0 0.0 0.0"/>
      <inertia ixx="0.01" ixy="0.0" ixz="0.0" iyy="0.01" iyz="0.0" izz="0.01"/>
    </inertial>
    <visual>
      <origin rpy="0.0 0.0 0.0" xyz="0.0 0.0 0.0"/>
      <geometry>
        <sphere radius="0.0005"/>
      </geometry>
    </visual>
    <collision>
      <origin rpy="0.0 0.0 0.0" xyz="0.0 0.0 0.0"/>
      <geometry>
        <sphere radius="0.0005"/>
      </geometry>
    </collision>
  </link>
  <link name="bluerov2/kinect_camera_kinect_ir_optical_frame"/>
  <link name="bluerov2/kinect_camera_kinect_rgb_link">
    <inertial>
      <mass value="0.001"/>
      <origin rpy="0.0 0.0 0.0" xyz="0.0 0.0 0.0"/>
      <inertia ixx="0.01" ixy="0.0" ixz="0.0" iyy="0.01" iyz="0.0" izz="0.01"/>
    </inertial>
    <visual>
      <origin rpy="0.0 0.0 0.0" xyz="0.0 0.0 0.0"/>
      <geometry>
        <sphere radius="0.0005"/>
      </geometry>
    </visual>
    <collision>
      <origin rpy="0.0 0.0 0.0" xyz="0.0 0.0 0.0"/>
      <geometry>
        <sphere radius="0.0005"/>
      </geometry>
    </collision>
  </link>
  <link name="bluerov2/kinect_camera_kinect_rgb_optical_frame"/>
  <gazebo reference="bluerov2/kinect_camera_kinect_ir_link">
    <sensor name="bluerov2/kinect_camera_kinect_ir_link_ir_sensor" type="depth">
      <always_on>true</always_on>
      <update_rate>1.0</update_rate>
      <camera>
        <horizontal_fov>0.994837673637</horizontal_fov>
        <image>
          <format>L8</format>
          <width>640</width>
          <height>480</height>
        </image>
        <clip>
          <near>1.2</near>
          <far>3.5</far>
        </clip>
      </camera>
      <plugin filename="libgazebo_ros_openni_kinect.so" name="bluerov2/kinect_camera_kinect_ir_link_controller">
        <baseline>0.2</baseline>
        <alwaysOn>true</alwaysOn>
        <updateRate>1.0</updateRate>
        <cameraName>head_mount_kinect_ir</cameraName>
        <imageTopicName>/head_mount_kinect/depth/image_raw</imageTopicName>
        <cameraInfoTopicName>/head_mount_kinect/depth/camera_info</cameraInfoTopicName>
        <depthImageTopicName>/head_mount_kinect/depth/image_raw</depthImageTopicName>
        <depthImageCameraInfoTopicName>/head_mount_kinect/depth/camera_info</depthImageCameraInfoTopicName>
        <pointCloudTopicName>/head_mount_kinect/depth/points</pointCloudTopicName>
        <frameName>bluerov2/kinect_camera_kinect_ir_optical_frame</frameName>
        <pointCloudCutoff>0.5</pointCloudCutoff>
        <distortionK1>0.00000001</distortionK1>
        <distortionK2>0.00000001</distortionK2>
        <distortionK3>0.00000001</distortionK3>
        <distortionT1>0.00000001</distortionT1>
        <distortionT2>0.00000001</distortionT2>
        <CxPrime>0</CxPrime>
        <Cx>0</Cx>
        <Cy>0</Cy>
        <focalLength>0</focalLength>
        <hackBaseline>0</hackBaseline>
      </plugin>
    </sensor>
    <material value="Gazebo/Red"/>
  </gazebo>
  <gazebo reference="bluerov2/kinect_camera_kinect_rgb_link">
    <sensor name="bluerov2/kinect_camera_kinect_rgb_link_rgb_sensor" type="depth">
      <always_on>true</always_on>
      <update_rate>1.0</update_rate>
      <camera>
        <horizontal_fov>0.994837673637</horizontal_fov>
        <image>
          <format>R8G8B8</format>
          <width>640</width>
          <height>480</height>
        </image>
        <clip>
          <near>1.2</near>
          <far>3.5</far>
        </clip>
      </camera>
      <plugin filename="libgazebo_ros_openni_kinect.so" name="bluerov2/kinect_camera_kinect_rgb_link_controller">
        <alwaysOn>true</alwaysOn>
        <updateRate>1.0</updateRate>
        <cameraName>head_mount_kinect_rgb</cameraName>
        <imageTopicName>/head_mount_kinect/rgb/image_raw</imageTopicName>
        <cameraInfoTopicName>/head_mount_kinect/rgb/camera_info</cameraInfoTopicName>
        <depthImageTopicName>/head_mount_kinect/depth/image_raw</depthImageTopicName>
        <depthImageCameraInfoTopicName>/head_mount_kinect/depth/camera_info</depthImageCameraInfoTopicName>
        <pointCloudTopicName>/head_mount_kinect/depth_registered/points</pointCloudTopicName>
        <frameName>bluerov2/kinect_camera_kinect_rgb_optical_frame</frameName>
        <pointCloudCutoff>0.5</pointCloudCutoff>
        <distortionK1>0.00000001</distortionK1>
        <distortionK2>0.00000001</distortionK2>
        <distortionK3>0.00000001</distortionK3>
        <distortionT1>0.00000001</distortionT1>
        <distortionT2>0.00000001</distortionT2>
        <CxPrime>0</CxPrime>
        <Cx>0</Cx>
        <Cy>0</Cy>
        <focalLength>0</focalLength>
        <hackBaseline>0</hackBaseline>
      </plugin>
    </sensor>
    <material value="Gazebo/Red"/>
  </gazebo>
  <link name="bluerov2/duo3d_left_link">
    <inertial>
      <mass value="0.01"/>
      <inertia ixx="0" ixy="0.0" ixz="0.0" iyy="0" iyz="0.0" izz="0"/>
    </inertial>
    <visual>
      <geometry>
        <mesh filename="package://bluerov2_hdt/meshes/duo3d.dae"/>
      </geometry>
    </visual>
    <collision>
      <geometry>
        <cylinder length="1e-06" radius="1e-06"/>
      </geometry>
      <origin rpy="0 1.57079632679 0" xyz="0 0 0"/>
    </collision>
  </link>
  <joint name="bluerov2/duo3d_joint" type="revolute">
    <origin rpy="0 0 0" xyz="0.25 0 0."/>
    <parent link="bluerov2/base_link"/>
    <child link="bluerov2/duo3d_left_link"/>
    <limit effort="0" lower="0" upper="0" velocity="0"/>
    <axis xyz="1 0 0"/>
  </joint>
  <gazebo reference="bluerov2/duo3d_left_link">
    <sensor name="camera" type="camera">
      <camera>
        <horizontal_fov>1.3844</horizontal_fov>
        <image>
          <width>640</width>
          <height>460</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <near>0.05</near>
          <far>5000</far>
        </clip>
        <distortion>
          <k1>0</k1>
          <k2>0</k2>
          <k3>0</k3>
          <p1>0</p1>
          <p2>0</p2>
          <center>0.5 0.5</center>
        </distortion>
      </camera>
      <plugin filename="libgazebo_ros_camera.so" name="left_controller">
        <alwaysOn>true</alwaysOn>
        <updateRate>30.0</updateRate>
        <cameraName>bluerov2/duo3d_left</cameraName>
        <imageTopicName>image_raw</imageTopicName>
        <cameraInfoTopicName>camera_info</cameraInfoTopicName>
        <frameName>bluerov2/duo3d_left_link</frameName>
        <hackBaseline>0.07</hackBaseline>
        <distortionK1>0</distortionK1>
        <distortionK2>0</distortionK2>
        <distortionK3>0</distortionK3>
        <distortionT1>0</distortionT1>
        <distortionT2>0</distortionT2>
      </plugin>
      <always_on>1</always_on>
      <update_rate>30</update_rate>
      <visualize>true</visualize>
    </sensor>
  </gazebo>
  <link name="bluerov2/duo3d_right_link">
    <inertial>
      <mass value="0.01"/>
      <inertia ixx="0" ixy="0.0" ixz="0.0" iyy="0" iyz="0.0" izz="0"/>
    </inertial>
    <collision>
      <geometry>
        <cylinder length="1e-06" radius="1e-06"/>
      </geometry>
      <origin rpy="0 1.57079632679 0" xyz="0 0 0"/>
    </collision>
  </link>
  <joint name="bluerov2/duo3d_right_joint" type="revolute">
    <origin rpy="0 0 0" xyz="0.0 -0.03 0"/>
    <parent link="bluerov2/duo3d_left_link"/>
    <child link="bluerov2/duo3d_right_link"/>
    <limit effort="0" lower="0" upper="0" velocity="0"/>
    <axis xyz="1 0 0"/>
  </joint>
  <gazebo reference="bluerov2/duo3d_right_link">
    <sensor name="camera" type="camera">
      <camera>
        <horizontal_fov>1.3844</horizontal_fov>
        <image>
          <width>640</width>
          <height>460</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <near>0.05</near>
          <far>5000</far>
        </clip>
        <distortion>
          <k1>0</k1>
          <k2>0</k2>
          <k3>0</k3>
          <p1>0</p1>
          <p2>0</p2>
          <center>0.5 0.5</center>
        </distortion>
      </camera>
      <plugin filename="libgazebo_ros_camera.so" name="right_controller">
        <alwaysOn>true</alwaysOn>
        <updateRate>30.0</updateRate>
        <cameraName>bluerov2/duo3d_right</cameraName>
        <imageTopicName>image_raw</imageTopicName>
        <cameraInfoTopicName>camera_info</cameraInfoTopicName>
        <frameName>bluerov2/duo3d_right_link</frameName>
        <hackBaseline>0.07</hackBaseline>
        <distortionK1>0</distortionK1>
        <distortionK2>0</distortionK2>
        <distortionK3>0</distortionK3>
        <distortionT1>0</distortionT1>
        <distortionT2>0</distortionT2>
      </plugin>
      <always_on>1</always_on>
      <update_rate>30</update_rate>
      <visualize>true</visualize>
    </sensor>
  </gazebo>
  <!-- Mount a camera -->
  <!-- <xacro:default_camera namespace="${namespace}" parent_link="${namespace}/base_link" suffix="front">
    <origin xyz="0 0 0.2" rpy="0 0 0"/>
  </xacro:default_camera> -->
</robot>

